---
- name: Fetch latest Go version
  ansible.builtin.uri:
    url: https://go.dev/VERSION?m=text
    return_content: true
  register: go_version

- name: Set Go version variable
  ansible.builtin.set_fact:
    golang_version: "{{ go_version.content | regex_replace('\\s|time.*$', '') | regex_replace('^go(.*)$', '\\1') }}"
  when: go_version.content is defined

- name: Set fallback Go version for check mode
  ansible.builtin.set_fact:
    golang_version: "1.21.0"
  when: go_version.content is not defined

- name: Set Go architecture for URL (Apple Silicon)
  ansible.builtin.set_fact:
    go_arch: "arm64"
  when: ansible_architecture == "arm64"

- name: Set Go architecture for URL (Intel Mac)
  ansible.builtin.set_fact:
    go_arch: "amd64"
  when: ansible_architecture == "x86_64"

- name: Check if latest Golang is installed
  ansible.builtin.command: go version
  register: go_version_result
  ignore_errors: true
  changed_when: false

- name: Create Go directory
  ansible.builtin.file:
    path: "{{ user_home }}/go"
    state: directory
    owner: "{{ username }}"
    mode: '0755'
  become_user: "{{ username }}"
  become: true

- name: Download Golang tarball
  ansible.builtin.unarchive:
    src: "https://go.dev/dl/go{{ golang_version }}.{{ ansible_system | lower }}-{{ go_arch }}.tar.gz"
    dest: "{{ user_home }}"
    remote_src: true
    owner: "{{ username }}"
  become_user: "{{ username }}"
  become: true
  when: go_version_result is failed or go_version_result.stdout.find(golang_version) == -1

- name: Add Go to PATH environment variable
  ansible.builtin.lineinfile:
    path: "{{ user_home }}/.zshrc"
    create: true
    mode: "0644"
    line: "export PATH=$PATH:{{ user_home }}/go/bin"
    owner: "{{ username }}"
  become_user: "{{ username }}"
  become: true
