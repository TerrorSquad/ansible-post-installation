---
- name: Set default type to deb
  ansible.builtin.set_fact:
    type: deb

- name: Set github_asset_dest
  ansible.builtin.set_fact:
    github_asset_dest: "{{ download_dir }}/{{ github_asset }}"

- name: Debug installation parameters
  ansible.builtin.debug:
    msg: |
      Installing {{ github_asset }} from {{ github_repo }}
      Type: {{ type }}
      Architecture filter: {{ architecture_filter | default('undefined') }}
      Excluded OS filter: {{ excluded_os_filter | default('undefined') }}
      Ansible architecture: {{ ansible_architecture }}

- name: Fetch GitHub release information
  ansible.builtin.uri:
    url: https://api.github.com/repos/{{ github_repo }}/releases/latest
    return_content: true
    body_format: json
    timeout: 30
  register: github_release_info
  retries: 3
  delay: 2
  failed_when: false

- name: Debug GitHub API response
  ansible.builtin.debug:
    msg: "GitHub API response status: {{ github_release_info.status | default('undefined') }}"
  when: github_release_info.status is defined

- name: Download binary asset {{ github_asset }}
  when: type == "binary" and github_release_info.status == 200 and github_release_info.json is defined and github_release_info.json.assets is defined and (github_release_info.json.assets | length > 0)
  block:
    - name: Filter binary asset URL
      ansible.builtin.set_fact:
        binary_asset_url: "{{ github_release_info.json.assets
          | selectattr('name', 'search', architecture_filter)
          | rejectattr('name', 'search', excluded_os_filter)
          | map(attribute='browser_download_url')
          | first }}"
      when: architecture_filter is defined and excluded_os_filter is defined

    - name: Download binary asset
      ansible.builtin.get_url:
        url: "{{ binary_asset_url }}"
        dest: "{{ github_asset_dest }}"
        mode: "0755"
        timeout: 60
      retries: 3
      delay: 2

    - name: Install binary asset
      ansible.builtin.copy:
        src: "{{ download_dir }}/{{ github_asset }}"
        dest: "/usr/local/bin/{{ github_asset }}"
        mode: "0755"
        remote_src: true
      become: true

- name: "Download deb asset {{ github_asset }}"
  when: type == "deb" and github_release_info.status == 200 and github_release_info.json is defined and github_release_info.json.assets is defined
  block:
    - name: Filter assets by deb type
      ansible.builtin.set_fact:
        deb_asset_url: "{{ github_release_info.json.assets | selectattr('name', 'search', 'deb') }}"

    - name: Apply additional filters to deb assets (multiple only)
      ansible.builtin.set_fact:
        deb_asset_url: "{{ deb_asset_url
          | selectattr('name', 'search', architecture_filter)
          | rejectattr('name', 'search', excluded_os_filter) }}"
      when: deb_asset_url | length > 1

    - name: Download deb asset
      ansible.builtin.get_url:
        url: "{{ deb_asset_url | map(attribute='browser_download_url') | first }}"
        dest: "{{ github_asset_dest }}.deb"
        mode: "0755"
        timeout: 60
      retries: 3
      delay: 2

    - name: Install deb asset
      ansible.builtin.apt:
        deb: "{{ github_asset_dest }}.deb"
        state: present
      register: apt_output
      failed_when: false

    - name: Check if the deb asset was not installed
      ansible.builtin.debug:
        msg: "The package was not installed because a newer version is already installed."
      when: apt_output is failed

- name: Download tar.gz asset {{ github_asset }}
  when: type == "tar.gz" and github_release_info.status == 200 and github_release_info.json is defined and github_release_info.json.assets is defined
  block:
    - name: Filter tar.gz asset URL
      ansible.builtin.set_fact:
        tar_gz_asset_url: "{{ github_release_info.json.assets
          | selectattr('name', 'search', architecture_filter)
          | rejectattr('name', 'search', excluded_os_filter)
          | selectattr('name', 'search', 'tar.gz')
          | map(attribute='browser_download_url')
          | first }}"

    - name: Download tar.gz asset
      ansible.builtin.get_url:
        url: "{{ tar_gz_asset_url }}"
        dest: "{{ github_asset_dest }}.tar.gz"
        mode: "0755"
        timeout: 60
      retries: 3
      delay: 2

    - name: Create directory for extracted asset
      ansible.builtin.file:
        path: "{{ github_asset_dest }}"
        state: directory
        mode: "0755"
        owner: "{{ username }}"

    - name: Extract tar.gz asset and register extracted directory path
      ansible.builtin.unarchive:
        src: "{{ github_asset_dest }}.tar.gz"
        dest: "{{ github_asset_dest }}"
        remote_src: true
      register: extracted_dir

    - name: Find the exact path of the file
      ansible.builtin.find:
        paths: "{{ extracted_dir.dest }}"
        patterns: "{{ github_asset }}"
        recurse: true
      register: files_found

    - name: Move asset to /usr/local/bin
      ansible.builtin.copy:
        src: "{{ files_found.files[0].path }}"
        dest: "/usr/local/bin/{{ github_asset }}"
        mode: "0755"
        owner: "{{ username }}"
        group: "{{ username }}"
        remote_src: true
      become: true

- name: "Install via Homebrew (macOS fallback) - {{ github_asset }}"
  when: type == "homebrew" and ansible_os_family == 'Darwin'
  block:
    - name: "Install via Homebrew - {{ github_asset }}"
      community.general.homebrew:
        name: "{{ github_asset }}"
        state: present
        path: "{{ homebrew_path }}"
      retries: 3
      become: false

- name: "Log GitHub API failure for {{ github_asset }}"
  ansible.builtin.debug:
    msg: |
      GitHub API call failed for {{ github_repo }}/{{ github_asset }}:
      Status: {{ github_release_info.status | default('undefined') }}
      Message: {{ github_release_info.msg | default('No error message available') }}
      Architecture filter: {{ architecture_filter | default('undefined') }}
      Ansible architecture: {{ ansible_architecture }}
      Assets available: {{ github_release_info.json.assets | default([]) | length }} assets found
      Skipping installation.
  when: >
    github_release_info.status is defined and 
    (github_release_info.status != 200 or 
     github_release_info.json is not defined or 
     github_release_info.json.assets is not defined or 
     (github_release_info.json.assets | length == 0))

- name: "Log missing architecture filter for {{ github_asset }}"
  ansible.builtin.debug:
    msg: |
      Architecture filter not properly defined for {{ github_asset }}:
      Architecture filter: {{ architecture_filter | default('undefined') }}
      Excluded OS filter: {{ excluded_os_filter | default('undefined') }}
      Ansible architecture: {{ ansible_architecture }}
      Expected mapping: {{ docker_compose_architecture | default({}) }}
      Skipping installation.
  when: architecture_filter is not defined or excluded_os_filter is not defined
